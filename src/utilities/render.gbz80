INCLUDE "hardware.inc"

SECTION "VRAMLayout", VRAM[$8000]

DEF TILE_BLOCK_SIZE EQU $800
export TILE_BLOCK_SIZE

tileBlock0::
	ds TILE_BLOCK_SIZE
tileBlock1::
	ds TILE_BLOCK_SIZE
tileBlock2::
	ds TILE_BLOCK_SIZE

DEF TILE_MAP_SIZE EQU $400
export TILE_MAP_SIZE

tileMap0::
	ds TILE_MAP_SIZE
tileMap1::
	ds TILE_MAP_SIZE

SECTION "VideoLibMemory", HRAM

hDrawBuffer:: ds 1
hFillBuffer:: ds 1

SECTION "VideoLibMemoryBuf1", WRAM0[$C000]

scrollBuffer1:
	ds SCRN_Y * 2

SECTION "VideoLibMemoryBuf2", WRAM0[$C200]
scrollBuffer2:
	ds SCRN_Y * 2

SECTION "OAMShadow", WRAM0, ALIGN[8]

oamShadowStart::
ds OAM_COUNT * sizeof_OAM_ATTRS

SECTION "videoLib", ROM0

;a = address of OAM data
OAMDMAHandlerCode::
	LOAD "OAMHandler", HRAM
OAMDMAHandler::
	ldh [rDMA], a
	ld a, 40
.wait:
	dec a
	jr nz, .wait
	ret
	ENDL
.end::

;a  = initial bg index of writes
;hl = pointer to palette data
;c  = number of words to write
CGBInitBGPalettes::
	or a, BCPSF_AUTOINC
	ld [rBCPS], a

.writeLoop:
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	dec c
	jp nz, .writeLoop

	ret

;a  = initial bg index of writes
;hl = pointer to palette data
;c  = number of words to write
CGBInitOBJPalettes::
	or a, OCPSF_AUTOINC
	ld [rOCPS], a

.writeLoop:
	ld a, [hli]
	ld [rOCPD], a
	ld a, [hli]
	ld [rOCPD], a
	dec c
	jp nz, .writeLoop

	ret

SECTION "render", ROM0
LCDOff::
    ldh a, [rLY]
    cp 144
    jr c, LCDOff
    ld a, LCDCF_OFF
    ld [rLCDC], a
    ret
; @param de Source
; @param hl Destination
; @param c Length
LCDMemcpy::
    ldh a, [rSTAT]
    and STATF_BUSY
    jr nz, LCDMemcpy
    ld a, [de]
    ld [hli], a
    inc de
    dec c
    jr nz, LCDMemcpy
    ret

; @param d Value
; @param hl Destination
; @param c Length
LCDMemset::
    ldh a, [rSTAT]
    and STATF_BUSY
    jr nz, LCDMemset
    ld a, d
    ld [hli], a
    dec c
    jr nz, LCDMemset
    ret

; @param d Value
; @param hl Destination
; @param c Length
; a trashed
LCDMemsetV::
    ldh a, [rSTAT]
    and STATF_BUSY
    jr nz, LCDMemsetV
    ld [hl], d
    ld a, SCRN_VX_B
    add a, l
    ld l, a
    jr nc, .nocarry
    inc h
.nocarry:
    dec c
    jr nz, LCDMemsetV
    ret
    
; @param de Tiles
; @param hl Destination
; @param bc length
copyTiles::
    ld a, [de]
    ld [hli], a
    inc de
    dec bc ;dec r16 doesn't set flags so we have to compare ourselves
    ld a, b 
    or a, c ;if b or c == 0 it means bc == 0
    jr nz, copyTiles
    ret
