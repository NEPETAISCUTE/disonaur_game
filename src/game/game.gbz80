INCLUDE "hardware.inc"
INCLUDE "player.inc"
INCLUDE "spriteAnim.inc"
INCLUDE "enemy.inc"

DEF GROUND_HEIGHT = $0E
DEF GROUND_HEIGHT_PX = $70

DEF JUMP_INITIAL_ACCEL = -2.0q8
DEF JUMP_PROLONG_ACCEL = -0.35q8
DEF GRAVITY_ACCEL = 0.4q8

SECTION "MainGameRAM", WRAM0
isGrounded: ds 1

playerPosX:: ds 2
playerPosY:: ds 2
playerVelX:: ds 2
playerVelY:: ds 2
playerAccelX:: ds 2
playerAccelY:: ds 2

playerAnim:: ds 1

screenScrollSpeed: ds 2
screenScrollPos: ds 2

EnemySpawnTimer: ds 1
EnemySlots:
.enemy1:
	ds Enemy_Size
.enemy2:
	ds Enemy_Size
.enemy3:
	ds Enemy_Size
.enemy4:
	ds Enemy_Size

SECTION "MainGame", ROM0
game::
    ld a, [firstStateFrame]
    or a, 0 ;if the flag is nonzero, we already initialized everything
    jr nz, .skipFirstFrameLoading

    call initFrame

.skipFirstFrameLoading:

	call handlePlayerControl
	call handleEnemySpawn
	;call updateEnemies
	call updatePlayer
	call updateScrolling
    call handlePlayerAnim

	ld a, [playerPosX]
	ld [playerX], a
	ld a, [playerPosY]
	ld [playerY], a
	ld a, [screenScrollPos]
	ld [backgroundX], a

    ret

;handles control related player stuff, like making the player jump, making the player fall slower when midair, 
;and probably in the future, move left and right
handlePlayerControl:
	ld a, [isGrounded]
	cp a, 0
	jr z, .skipInitiateJump

    ld a, [pressedInput]
    and a, PADF_A
    jr z, .skipProlongateJump

	ld a, HIGH(JUMP_INITIAL_ACCEL)
    ld [playerAccelY], a
	ld a, LOW(JUMP_INITIAL_ACCEL)
	ld [playerAccelY+1], a
    ld a, 0
    ld [isGrounded], a
	ld [playerVelY], a
	jr .skipProlongateJump

.skipInitiateJump:
    ld a, [currentInput]
    and a, PADF_A
    jr z, .skipProlongateJump
	ld a, [playerVelY]
	and $80
	jr z, .skipProlongateJump

    ld a, HIGH(JUMP_PROLONG_ACCEL)
    ld [playerAccelY], a ;basically corresponds to -32 subpixels and 0 pixels
	ld a, LOW(JUMP_PROLONG_ACCEL)
	ld [playerAccelY+1], a
.skipProlongateJump:
	ret

;handles autonomous player update like acceleration, velocity or position
updatePlayer:
	ld a, [isGrounded]
	cp a, 0
	jr nz, .skipMidAirHandling ;if player is midair

	ld a, [playerAccelY+1]
	add a, LOW(GRAVITY_ACCEL)
	ld [playerAccelY+1], a
	ld a, [playerAccelY]
	adc a, HIGH(GRAVITY_ACCEL)
	ld [playerAccelY], a        ;apply gravity

	ld a, [playerPosY]
	cp a, GROUND_HEIGHT_PX + 8 + 1 ; add one to the height of the ground + the height of the sprite, since we're using carry as a flag
	jr c, .skipSetPlayerPosY ;if player is under the ground

	ld a, GROUND_HEIGHT_PX + 8 ;height of ground + height of sprite since it's the position of the top left corner of the sprite that's defined here
	ld [playerPosY], a
	ld a, 0
	ld [playerPosY+1], a ;we clip player onto the ground

	ld [playerVelY], a
	ld [playerVelY+1], a ;remove all velocity

	ld [playerAccelY], a
	ld [playerAccelY+1], a ;all acceleration as well
	
	ld a, 1
	ld [isGrounded], a ;player is on ground since clipped to it

.skipSetPlayerPosY:
.skipMidAirHandling:
    
    ld a, [playerVelX+1]
	ld b, a
    ld a, [playerAccelX+1]
	add a, b
	ld [playerVelX+1], a   ;add acceleration to velocity

    ld a, [playerVelX]
	ld b, a
    ld a, [playerAccelX]
    adc a, b
	ld [playerVelX], a ;same for high part

    ld a, 0
    ld [playerAccelX], a
    ld [playerAccelX+1], a ;reset acceleration since it's a one frame variable

    ld a, [playerVelY+1]
    ld b, a
    ld a, [playerAccelY+1]
	add a, b
	ld [playerVelY+1], a  ;same thing with Y low

    ld a, [playerVelY]
    ld b, a
    ld a, [playerAccelY]
    adc a, b
	ld [playerVelY], a ;Y high as well

    ld a, 0
    ld [playerAccelY], a
    ld [playerAccelY+1], a ;Y accel is reset too

    ld a, [playerPosX+1]
	ld b, a
    ld a, [playerVelX+1]
	add a, b
	ld [playerPosX+1], a ;now update position depending on velocity

    ld a, [playerPosX]
	ld b, a
    ld a, [playerVelX]
	adc a, b
	ld [playerPosX], a

    ld a, [playerPosY+1]
	ld b, a
    ld a, [playerVelY+1]
	add a, b
	ld [playerPosY+1], a

    ld a, [playerPosY]
    ld b, a
    ld a, [playerVelY]
	adc a, b
	ld [playerPosY], a
	ret

;updates the scrolling using the scrollSpeed specified by our scrollSpeed variable
;i plan to make that speed increase as time goes on, to increase difficulty
;the screen scroll speed is also what will describe at which speed the enemies will move to the left
updateScrolling:
    ld a, [screenScrollPos+1]
	ld b, a
    ld a, [screenScrollSpeed+1]
	add a, b
	ld [screenScrollPos+1], a

    ld a, [screenScrollPos]
	ld b, a
    ld a, [screenScrollSpeed]
    adc a, b
	ld [screenScrollPos], a
	ret

;handles the player animation, should modify it a bit and change the name to clarify
;since enemies will have animations too, probably handled somewhere else
handlePlayerAnim:
    ld a, [playerVelY]
    and a, $80 ;is VelY negative
	;if it is, the player is moving upward, set the animation to be jumping towards the top of the screen
    jr nz, .setJumping 
	cp a, 0
	;if it's nonzero it's positive, falling animation since the player moves towards the bottom of the screen
    jr nz, .setFalling 

	ld a, [playerVelY + 1]
	cp a, 0
	;same as for the nonzero case of before, we gotta check for the decimal part
	jr nz, .setFalling 

	;dunno why the hell i put that here
	ld a, [playerTile]
	cp a, 6 ;max index + 1 for the running anim
	jr c, .skipSetPlayerTile
	ld a, 1 ;min index for the running anim
	ld [playerTile], a
	;-----------------------------------
.skipSetPlayerTile:
    ld a, [playerAnim] ;variable name is ambiguous, it's a frame timer before animation update for running anim
    cp a, 6 ;every 6 frames
    jr nz, .skipAnimCnt
    ld a, 0
    ld [playerAnim], a ;reset frame counter
    ld hl, playerTile
    inc [hl] ;increment the player tile ID
    ld a, [playerTile] ;if we reach the end of the animation
	cp a, 5
    jr nz, .skipAnimCnt
    ld a, 1 ;we reset it to the start of the animation
    ld [playerTile], a
.skipAnimCnt:
    ld hl, playerAnim
    inc [hl] ;increment the counter
    ret

;.setIdle:
    ;ld a, ANIM_PLAYER_IDLE
    ;ld [playerTile], a
    ;ret

.setJumping:
    ld a, ANIM_PLAYER_JUMP
    ld [playerTile], a
    ret 

.setFalling:
    ld a, ANIM_PLAYER_FALL
    ld [playerTile], a
    ret

DefaultRoller:
.ID:
	db ENEMY_ID_ROLLER
.PosX:
	dw $FF00
.Posy:
	dw GROUND_HEIGHT_PX << 8 | $00
.EnemyAnimCnt:
	db 0
.EnemyTileID:
	db $5
.EnemyTileAttribute:
	db %00000000 ;no attributes for now

DefaultBird:
.ID:
	db ENEMY_ID_BIRD
.PosX:
	dw $FF00
.Posy:
	dw $0000
.EnemyAnimCnt:
	db 0
.EnemyTileID:
	db $9
.EnemyTileAttribute:
	db %00000000 ;no attributes for now

DefaultFrog:
.ID:
	db ENEMY_ID_FROG
.PosX:
	dw $FF00
.PosY:
	dw GROUND_HEIGHT_PX << 8 | $00
.EnemyAnimCnt:
	db 0
.EnemyTileID:
	db $D
.EnemyTileAttribute:
	db %00000000

DefaultGhost:
.ID:
	db ENEMY_ID_GHOST
.PosX:
	dw $FF00
.PosY:
	dw GROUND_HEIGHT_PX << 8 | $00
.EnemyAnimCnt:
	db 0
.EnemyTileID:
	db $15
.EnemyTileAttribute:
	db %00000000

EnemyDataTable:
	dw DefaultRoller
	dw DefaultBird
	dw DefaultFrog
	dw DefaultGhost

;when the enemy spawn timer counted 120 frames, it finds the first enemy slot, and puts a random enemy in it
handleEnemySpawn:
	ld a, [EnemySpawnTimer]
	inc a
	cp a, 120
	jr nz, .end

	ld hl, EnemySlots
	ld c, 0

	ld de, Enemy_Size ;prepare the size of the struct in advance for pointer increment
.enemySlotLoop:
	ld a, [hl]
	cp a, 0
	jr z, .endLoop
	add hl, de
	inc c
	ld a, c
	cp a, 4 ;if smaller than 4
	jr c, .enemySlotLoop ;we keep going
	jr .resetCounterAndEnd ;else we stop looking, no slots are available
.endLoop:
	ld d, h
	ld e, l
	call rand
	ld h, d
	ld l, e
	
	ld b, h
	ld c, l

	ld hl, EnemyDataTable
	and a, %00000011
	add a, l
	ld l, a
	ld a, 0
	adc a, h
	ld h, a

	ld a, [hli]
	ld d, a
	ld a, [hl]
	ld e, a

	ld h, b
	ld l, c
	ld bc, Enemy_Size
	call memcpy

.resetCounterAndEnd
	xor a, a
.end:
	ld [EnemySpawnTimer], a
	ret

;initializes all uninitialized enemies
;initializeEnemies:
;	ld a, [EnemySpawnTimer]
;	cp a, 0
;	jr nz, .end ;if we did not just spawn an enemy, there's no need to initialize anything

;	ld hl, EnemySlots
;.checkLoop:
;	ld a, [hl]
;	cp a, 0 ;is it an empty slot?
;	jr nz, .checkTileID ;if not, we need to check if it's uninitialized
;.nextSlot
;	ld de, Enemy_Size
;	add hl, de ;next slot
;	inc c ;check if we exceed max slot
;	ld a, c
;	cp a, 4
;	jr c, .end ;there's no more slot to initialize, let's return
;	jr .checkLoop
;.checkTileID:
;	ld de, EnemyTileID
;	add hl, de
;	ld a, [hl]
;	cp a, 0
;	jr z, .initialize
;	ld de, Enemy_Size - EnemyTileID
;	add hl, de
;	jr .checkLoop
;.initialize:
;	ld de, EnemyTileID
;	sub hl, de
;	ld a, [hl]
;	dec a ;decrement to have an index between 0 and 3
;	push hl ;backup hl, we'll need hl here for a memcpy
;	push bc ;same for bc
;	push de ;same for de
;	ld de, EnemyDataTable
;	sla a ;multiply by 2 to handle offsets properly (they're pointers)
;	add a, e ;EnemyDataTable + 2 * a where a is the enemy type index
;	ld e, a
;	ld a, 0
;	adc a, d
;	ld d, a
;	ld bc, Enemy_Size ;we wanna initialize an enemy
;	call memcpy
;	pop de
;	pop bc
;	pop hl
;	jr .nextSlot
;
;.end:
;	ret
	

;called once everytime the game state got changed to the main one,
;serves for initializing the main game state properly so that the game
;doesn't glitch out
initFrame:
    call LCDOff ;turn off screen for setup
    
    ld d, 0
    ld hl, _SCRN0
    ld bc, SCRN_VX_B * (SCRN_Y_B-4)
    call memset ;clear up the title mostly

    ld d, 1
    ld hl, _SCRN0 + (SCRN_VX_B * $0E)
    ld bc, SCRN_VX_B
    call memset ;add grass tiles

    ld d, 2
    ld hl, _SCRN0 + (SCRN_VX_B * $0F)
    ld e, 0
.groundLoop:
    ld bc, SCRN_VX_B
    call memset   ;repeat memsets to add the ground tiles under grass
    ld a, d
    ld d, 0
    add hl, de
    ld d, a
    ld a, $40
    cp l
    jr nz, .groundLoop

    ld a, LCDCF_ON | LCDCF_BGON | LCDCF_OBJON
    ld [rLCDC], a ;turn back on the LCD

	;start position of the player, should define them
    ld a, $20
    ld [playerPosX], a 
    ld a, $78
    ld [playerPosY], a

	;initializing to 0 most variables
    ld a, $00
    ld [playerPosX+1], a
    ld [playerPosY+1], a
    ld [playerVelX], a
    ld [playerVelX+1], a
    ld [playerVelY], a
    ld [playerVelY+1], a
    ld [playerAccelX], a
    ld [playerAccelX+1], a
    ld [playerAccelY], a
    ld [playerAccelY+1], a
	ld [screenScrollSpeed], a
	ld [screenScrollPos], a
	ld [screenScrollPos+1], a
	ld [EnemySpawnTimer], a

	ld d, 0
	ld hl, EnemySlots
	ld bc, Enemy_Size * 4 ;we wanna clear all enemy slots
	call memset

	;setting the flag that indicates memory has been initialized
	;also sets up the playerTile, not sure it's still needed, but we never know
    ld a, 1
    ld [firstStateFrame], a
    ld [playerTile], a

	;base scroll speed for now, since scroll speed increase is not yet implemented
	ld a, $80
	ld [screenScrollSpeed+1], a

    ret
